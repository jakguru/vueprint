import { defineNuxtModule, createResolver, addImports, addTypeTemplate } from '@nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: '@jakguru/vueprint/nuxt',
    configKey: 'vueprint',
    compatibility: {
      nuxt: '^3.0.0',
    },
  },
  // Default configuration options for your module, can also be a function returning those
  defaults: {},
  // Shorthand sugar to register Nuxt hooks
  hooks: {},
  // The function holding your module logic, it can be asynchronous
  setup(_moduleOptions, _nuxt) {
    const resolver = createResolver(import.meta.url)
    addTypeTemplate({
      filename: 'types/vueprint.d.ts',
      getContents: () => `// Generated by vueprint
          import type {
            BusPluginOptions,
            LocalStoragePluginOptions,
            VuetifyPluginOptions,
            ApiPluginOptions,
            PushPluginOptions,
            IdentityPluginOptions,
          } from '@jakguru/vueprint'

          interface VueprintModuleOptions {
            bus?: BusPluginOptions
            ls?: LocalStoragePluginOptions
            vuetify?: VuetifyPluginOptions
            api?: ApiPluginOptions
            identity?: IdentityPluginOptions
            push?: PushPluginOptions
          }

          declare module '@nuxt/schema' {
            interface NuxtConfig { ['vueprint']?: Partial<VueprintModuleOptions> }
            interface NuxtOptions { ['vueprint']?: VueprintModuleOptions }
          }
          `,
    })
    addImports({
      name: 'useVueprint',
      as: 'useVueprint',
      from: resolver.resolve('/composables/useVueprint'),
    })
  },
})
